const path = require('path');
const fs = require('fs');
import Context from './Context';
import { downComponent } from './utils';
interface ComponentContext {
  instance: Context
  log?: (msg: string) => void
}
export default class Component {
  protected id: string;
  protected context: ComponentContext;
  protected state = {};
  public name: string
  constructor(id?: string, context?: Context) {
    this.id = id || this.constructor.name;
    if (!context) {
      context = new Context();
    }
    this.name = `instance_${Date.now()}`
    this.context = {
      instance: context
    };
  }

  async init() {
    await this.context.instance.init();
    this.state = await this.context.instance.getState(this.id)
  }

  async save() {
    const { id, state } = this;
    await this.context.instance.setState(id, state);
  }


  async load(componentName, componentAlias = '', provider = 'alibaba', ) {
    let externalComponentPath;


    if (this.context.instance.componentPathRoot) { // s component
      externalComponentPath = path.resolve(this.context.instance.componentPathRoot, componentName, 'index.js')
    } else {
      externalComponentPath = path.resolve(componentName)
    }

    if (!fs.existsSync(externalComponentPath)) {
      await downComponent(componentName, provider, path.join(this.context.instance.componentPathRoot, componentName));
    }
    const childComponent = await require(externalComponentPath)

    const childComponentId = `${this.id}.${componentAlias || childComponent.name}`

    const childComponentInstance = new childComponent(childComponentId, this.context.instance)

    if(childComponentInstance instanceof Component) {
      await childComponentInstance.init();
      childComponentInstance.context.log = () => { }
      childComponentInstance.context.status = () => { }
      childComponentInstance.context.output = () => { }
    } else if (childComponentInstance.init) {
      await childComponentInstance.init();
    }

    return childComponentInstance;
  }
}

