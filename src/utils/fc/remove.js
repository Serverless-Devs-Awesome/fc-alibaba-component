
const FcFunction = require('./function')
const FcTrigger = require('./trigger')
const { FUN_NAS_FUNCTION } = require('../nas/nas')
const nas = require('../nas/nas')
const { findDefaultVpcAndSwitch } = require('../vpc')
const Logs = require('../logs')
const Logger = require('../logger')

class Remove {
  constructor (commands = {}, parameters = {}, {
    credentials = {}, serviceName = '', serviceProp = {}, functionName = '', functionProp = {}, region = ''
  } = {}) {
    this.commands = commands
    this.parameters = parameters
    this.credentials = credentials
    this.serviceName = serviceName
    this.serviceProp = serviceProp
    this.functionName = functionName
    this.functionProp = functionProp
    this.region = region
    this.logger = new Logger()
  }

  async removeNasFunctionIfExists (serviceName) {
    const fcFunction = new FcFunction(this.credentials, this.region)
    const existsNasFunction = await fcFunction.functionExists(serviceName, FUN_NAS_FUNCTION)
    if (!existsNasFunction) {
      return
    }

    const fcTrigger = new FcTrigger(this.credentials, this.region)
    try {
      await fcTrigger.remove(serviceName, FUN_NAS_FUNCTION)
    } catch (e) {
      this.logger.warn(`Unable to remove trigger for ${FUN_NAS_FUNCTION}`)
    }

    try {
      await fcFunction.remove(serviceName, FUN_NAS_FUNCTION)
      this.logger.success(`Remove function for nas successfuly: ${FUN_NAS_FUNCTION}`)
    } catch (e) {
      this.logger.warn(`Unable to remove function: ${FUN_NAS_FUNCTION}`)
    }
  }

  async removeAutoGeneratedResourceIfExists () {
    const forceDelete = this.parameters.f || this.parameters.force || false
    // handle nas
    const nasConfig = this.serviceProp.Nas
    if (nasConfig) {
      const { vpcId, vswitchId } = await findDefaultVpcAndSwitch(this.credentials, this.region)
      if (vpcId && vswitchId) {
        try {
          await nas.deleteDefaultNas(this.credentials, this.region, vpcId, vswitchId, nasConfig, forceDelete)
        } catch (e) {
          this.logger.warn(`Failed to delete auto generated nas: ${e}`)
        }
      }
    }

    // handle sls
    const logConfig = this.serviceProp.Log
    if (logConfig) {
      const logs = new Logs(this.credentials, this.region, false)
      const autoConfig = logs.generateDefaultLogConfig()
      const isAutoGenerated = (logConfig === 'Auto') || (autoConfig.project === logConfig.Project && autoConfig.logStore === logConfig.LogStore)
      if (isAutoGenerated) {
        try {
          await logs.deleteDefaultSlsProject(forceDelete)
        } catch (e) {
          this.logger.warn(`Failed to delete auto generated sls project: ${e}`)
        }
      }
    }

    // handle vpc and vswitch
    // const vpcConfig = this.serviceProp.Vpc
    // if (this.isConfigAsAuto(vpcConfig)) {
    //   try {
    //     await vpc.deleteDefaultVpcAndSwitch(this.credentials, this.region, forceDelete)
    //   } catch (e) {
    //     this.logger.warn(`Failed to delete auto generated vpc and vswitch: ${e}`)
    //   }
    // }
  }

  isSlsAutoGenerated (config) {
    if (!config) {
      return false
    }
  }

  isConfigAsAuto (config) {
    if (config && typeof config === 'string' && config.toLocaleLowerCase() === 'auto') {
      return true
    }

    if (config && config.Type === 'Auto') {
      return true
    }

    return false
  }
}

module.exports = Remove
