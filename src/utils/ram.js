const Ram = require('@alicloud/ram')
const _ = require('lodash')

class RAM {
  constructor (credentials) {
    this.accessKeyID = credentials.AccessKeyID
    this.accessKeySecret = credentials.AccessKeySecret
    this.ramClient = new Ram({
      accessKeyId: this.accessKeyID,
      accessKeySecret: this.accessKeySecret,
      endpoint: 'https://ram.aliyuncs.com',
      opts: {
        timeout: 60000
      }
    })
  }

  normalizeRoleOrPoliceName (roleName) {
    return roleName.replace(/_/g, '-')
  }

  async makeRole (
    roleName,
    createRoleIfNotExist,
    description = 'FunctionCompute Default Role',
    assumeRolePolicy
  ) {
    for (let i = 0; i <= 3; i++) {
      try {
        let role
        try {
          role = await this.ramClient.getRole({
            RoleName: roleName
          })
        } catch (ex) {
          if (!assumeRolePolicy) {
            assumeRolePolicy = {
              Statement: [
                {
                  Action: 'sts:AssumeRole',
                  Effect: 'Allow',
                  Principal: {
                    Service: ['fc.aliyuncs.com']
                  }
                }
              ],
              Version: '1'
            }
          }
          if (!role && createRoleIfNotExist) {
            role = await this.ramClient.createRole({
              RoleName: roleName,
              Description: description,
              AssumeRolePolicyDocument: JSON.stringify(assumeRolePolicy)
            })
          } else if (!role) {
            throw new Error(`Role: ${roleName} not exist`)
          }
        }
        return role
      } catch (ex) {
        console.log(ex)
        if (ex.code && ex.code.startsWith('InvalidParameter')) {
          throw new Error(`Role: ${roleName} create failed. InvalidParameter: ${ex.message}`)
        } else if (ex.code && ex.code === 'NoPermission') {
          throw new Error(`Role: ${roleName} create failed. NoPermission: ${ex.message}`)
        } else {
          console.log('Retrying ... ...')
        }
      }
    }
  }

  async makePolicy (policyName, policyDocument) {
    let exists = true
    for (let i = 0; i <= 3; i++) {
      try {
        try {
          await this.ramClient.getPolicy({
            PolicyType: 'Custom',
            PolicyName: policyName
          })
        } catch (ex) {
          if (ex.code !== 'EntityNotExist.Policy') {
            throw new Error(`Policy: ${policyName}: ${ex.message}`)
          } else {
            exists = false
          }
        }

        if (!exists) {
          await this.ramClient.createPolicy({
            PolicyName: policyName,
            Description: 'Generated by Serverless Tool',
            PolicyDocument: JSON.stringify(policyDocument)
          })
        } else {
          // avoid limitExceeded.Policy.Version
          const listResponse = await this.ramClient.listPolicyVersions({
            PolicyType: 'Custom',
            PolicyName: policyName
          })
          const versions = (listResponse.PolicyVersions || {}).PolicyVersion
          if (versions) {
            for (const version of versions) {
              if (version.IsDefaultVersion === false) {
                await this.ramClient.deletePolicyVersion({
                  PolicyName: policyName,
                  VersionId: version.VersionId
                })
              }
            }
          }

          await this.ramClient.createPolicyVersion({
            PolicyName: policyName,
            PolicyDocument: JSON.stringify(policyDocument),
            SetAsDefault: true
          })
        }
      } catch (ex) {
        if (ex.code && ex.code === 'NoPermission') {
          throw new Error(`Policy: ${policyName}, NoPermission: ${ex.message}`)
        }
        console.log('Retrying ... ...')
      }
    }
  }

  async attachPolicyToRole (policyName, roleName, policyType = 'System') {
    for (let i = 0; i <= 3; i++) {
      try {
        const policies = await this.ramClient.listPoliciesForRole({
          RoleName: roleName
        })
        const policy = policies.Policies.Policy.find((item) => {
          return _.toLower(item.PolicyName) === _.toLower(policyName)
        })
        if (!policy) {
          await this.ramClient.attachPolicyToRole({
            PolicyType: policyType,
            PolicyName: policyName,
            RoleName: roleName
          })
        }
      } catch (ex) {
        if (ex.code && ex.code === 'NoPermission') {
          throw new Error(`Role@Policy: ${roleName}@${policyName}, NoPermission: ${ex.message}`)
        }
        console.log('Retrying ... ...')
      }
    }
  }

  async getRole (roleName) {
    return await this.ramClient.getRole({
      RoleName: roleName
    })
  }

  async existsRole (roleName) {
    try {
      const role = await this.ramClient.getRole({ RoleName: roleName })
      if (role) {
        return true
      }
    } catch (e) {
      if (!e.code) {
        throw e
      }
      const notExists = e.code.indexOf('EntityNotExist') >= 0
      return !notExists
    }

    return false
  }
}

module.exports = RAM
